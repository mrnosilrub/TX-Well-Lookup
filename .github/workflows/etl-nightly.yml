name: ETL Nightly (P4)

on:
  schedule:
    - cron: '27 4 * * *'
  workflow_dispatch:
    inputs:
      env:
        description: Environment to target
        required: true
        default: dev
        type: choice
        options: [dev, staging, prod]

permissions:
  contents: read

concurrency:
  group: etl-${{ inputs.env || 'dev' }}
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Setup AWS CLI
        run: |
          python -m pip install --upgrade pip
          pip install awscli
      - name: Install deps
        run: |
          pip install -r apps/api/requirements.txt
          pip install psycopg2-binary
      - name: Sync SDR raw from R2 (optional)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.STORAGE_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STORAGE_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
          RAW_SDR_BUCKET: ${{ vars.RAW_SDR_BUCKET }}
          RAW_SDR_PREFIX: ${{ vars.RAW_SDR_PREFIX }}
          STORAGE_ENDPOINT: ${{ secrets.STORAGE_ENDPOINT }}
        run: |
          set -euo pipefail
          mkdir -p data/raw_data/SDRDownload/SDRDownload
          if [ -n "${RAW_SDR_BUCKET:-}" ]; then
            aws s3 sync "s3://${RAW_SDR_BUCKET}/${RAW_SDR_PREFIX}" "data/raw_data/SDRDownload/SDRDownload" --endpoint-url "${STORAGE_ENDPOINT}" --no-progress
            echo "RAW_SDR_DIR=$GITHUB_WORKSPACE/data/raw_data/SDRDownload/SDRDownload" >> "$GITHUB_ENV"
          else
            echo "RAW_SDR_BUCKET not set; skipping R2 sync"
          fi
      - name: Run nightly snapshots
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -m data.jobs.nightly_snapshots
      - name: Summaries (Python)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          python - <<'PY'
          import os, psycopg2
          url = os.environ['DATABASE_URL']
          with psycopg2.connect(url) as conn:
              with conn.cursor() as cur:
                  for tbl in ('well_reports','gwdb_wells','well_links'):
                      cur.execute(f"SELECT COUNT(*) FROM {tbl}")
                      (n,) = cur.fetchone()
                      print(f"{tbl}: {n}")
          PY


