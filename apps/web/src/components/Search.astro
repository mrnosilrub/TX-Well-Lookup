---
const publicApi = import.meta.env.PUBLIC_API_URL || '';
---
<section class="card" data-api={publicApi}>
  <h3 style="margin-top:0">Search</h3>
  <form id="search-form" style="display:flex;flex-wrap:wrap;gap:8px;align-items:center">
    <input id="q" name="q" placeholder="Search wells (try: Sample)" style="flex:1 1 220px;min-width:200px;padding:10px 12px;border-radius:10px;border:1px solid #e5e7eb" />
    <input id="depthMin" name="depthMin" type="number" placeholder="Min depth (ft)" style="flex:0 0 160px;padding:10px 12px;border-radius:10px;border:1px solid #e5e7eb" />
    <input id="depthMax" name="depthMax" type="number" placeholder="Max depth (ft)" style="flex:0 0 160px;padding:10px 12px;border-radius:10px;border:1px solid #e5e7eb" />
    <button class="btn" type="submit" style="flex:0 0 auto">Search</button>
  </form>
  <div id="results" style="margin-top:12px"></div>
  <script is:inline>
    (function(){
    const form = document.getElementById('search-form');
    const container = document.currentScript.closest('section');
    const results = document.getElementById('results');
    const inputQ = document.getElementById('q');
    const inputMin = document.getElementById('depthMin');
    const inputMax = document.getElementById('depthMax');
    let currentItems = [];
    const setStatus = (msg) => {
      results.innerHTML = `<small>${msg}</small>`;
    };
    async function fetchItems() {
      const apiBase = (container?.dataset.api || '').toString().trim();
      const params = new URLSearchParams();
      const qVal = (document.getElementById('q').value || '').trim();
      const minVal = document.getElementById('depthMin').value;
      const maxVal = document.getElementById('depthMax').value;
      if (qVal) params.set('q', qVal);
      if (minVal) params.set('depth_min', String(parseFloat(minVal)));
      if (maxVal) params.set('depth_max', String(parseFloat(maxVal)));
      params.set('include_gwdb', 'true');
      const primary = apiBase
        ? new URL(`v1/search?${params.toString()}`, apiBase.endsWith('/') ? apiBase : apiBase + '/').toString()
        : new URL(`/v1/search?${params.toString()}`, window.location.origin).toString();
      const primaryNoGwdb = (() => {
        const p2 = new URLSearchParams(params);
        p2.delete('include_gwdb');
        return apiBase
          ? new URL(`v1/search?${p2.toString()}`, apiBase.endsWith('/') ? apiBase : apiBase + '/').toString()
          : new URL(`/v1/search?${p2.toString()}`, window.location.origin).toString();
      })();
      const fetchStub = async () => {
        try {
          const stub = new URL('api/search.json', document.baseURI).toString();
          const res2 = await fetch(stub, { cache: 'no-store' });
          if (!res2.ok) return [];
          const data2 = await res2.json();
          return Array.isArray(data2.items) ? data2.items : Array.isArray(data2) ? data2 : [];
        } catch {
          return [];
        }
      };
      try {
        const res = await fetch(primary, { cache: 'no-store' });
        if (!res.ok) {
          // Retry without GWDB enrichments if server errors
          try {
            const resNo = await fetch(primaryNoGwdb, { cache: 'no-store' });
            if (resNo.ok) {
              const dataNo = await resNo.json();
              return Array.isArray(dataNo.items) ? dataNo.items : Array.isArray(dataNo) ? dataNo : [];
            }
          } catch {}
          return await fetchStub();
        }
        const data = await res.json();
        return Array.isArray(data.items) ? data.items : Array.isArray(data) ? data : [];
      } catch (err) {
        // On network/JS errors, try no-GWDB path once before stub
        try {
          const resNo = await fetch(primaryNoGwdb, { cache: 'no-store' });
          if (resNo.ok) {
            const dataNo = await resNo.json();
            return Array.isArray(dataNo.items) ? dataNo.items : Array.isArray(dataNo) ? dataNo : [];
          }
        } catch {}
        console.warn('primary fetch failed, falling back to stub', err);
        return await fetchStub();
      }
    }
    function applyFilters(items) {
      const q = (document.getElementById('q').value || '').toLowerCase();
      const depthMin = parseFloat(document.getElementById('depthMin').value || '');
      const depthMax = parseFloat(document.getElementById('depthMax').value || '');
      return items.filter((it) => {
        const matchesQ = !q || `${it.name} ${it.county}`.toLowerCase().includes(q);
        const matchesMin = isNaN(depthMin) || (it.depth_ft ?? 0) >= depthMin;
        const matchesMax = isNaN(depthMax) || (it.depth_ft ?? 0) <= depthMax;
        return matchesQ && matchesMin && matchesMax;
      });
    }
    function ensureMap(items) {
      if (window.__tx_map) {
        window.__tx_map.setItems(items);
        return;
      }
      const onReady = () => {
        window.__tx_map?.setItems(items);
        window.removeEventListener('tx_map_ready', onReady);
      };
      window.addEventListener('tx_map_ready', onReady);
    }
    function render(items) {
      items = applyFilters(items);
      if (!items.length) {
        setStatus('No results.');
        ensureMap([]);
        return;
      }
      const ul = document.createElement('ul');
      ul.style.listStyle = 'none';
      ul.style.padding = '0';
      ul.style.margin = '0';
      items.forEach((it) => {
        const li = document.createElement('li');
        li.style.padding = '10px 0';
        li.style.borderBottom = '1px solid #eee';
        const hasGwdb = Boolean(it.gwdb_available) || Boolean(it.gwdb_depth_ft);
        const gwdb = hasGwdb ? `<span class="chip" style="background:#ecfeff;border:1px solid #a5f3fc;color:#083344;border-radius:999px;padding:2px 8px;margin-left:6px;font-size:11px">GWDB</span>` : '';
        li.innerHTML = `
          <strong><a href="well/${it.id}/">${it.name}</a></strong>
          ${gwdb}
          <div><small>${it.county} County • Depth: ${it.depth_ft} ft${it.gwdb_depth_ft ? ` • GWDB: ${it.gwdb_depth_ft} ft` : ''}${it.aquifer ? ` • Aquifer: ${it.aquifer}` : ''}${it.gcd ? ` • GCD: ${it.gcd}` : ''}</small></div>
          <div style="margin-top:6px"><button data-id="${it.id}" class="btn" style="padding:6px 10px">Fly to</button></div>
        `;
        ul.appendChild(li);
      });
      results.innerHTML = '';
      results.appendChild(ul);
      results.querySelectorAll('button[data-id]').forEach((btn) => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          const id = btn.getAttribute('data-id');
          window.__tx_map?.flyToItem(id);
        });
      });
      ensureMap(items);
    }
    // initial load and on submit
    setStatus('Loading…');
    fetchItems().then((items) => { currentItems = items; render(items); ensureMap(items); });
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      setStatus('Searching…');
      const items = await fetchItems();
      currentItems = items;
      render(items);
    });

    // live filter as you type/change
    const onFilterChange = () => render(currentItems);
    inputQ.addEventListener('input', onFilterChange);
    inputMin.addEventListener('input', onFilterChange);
    inputMax.addEventListener('input', onFilterChange);
    })();
  </script>
</section>


