<section class="card">
  <h3 style="margin-top:0">Map</h3>
  <div id="map" style="height:360px;border-radius:12px;overflow:hidden;min-height:280px"></div>
  <link href="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.css" rel="stylesheet" />
  <script src="https://unpkg.com/maplibre-gl@2.4.0/dist/maplibre-gl.js"></script>
  <script is:inline>
    (function(){
      const container = document.getElementById('map');
      if (!container) return;
      function init(){
        if (!window.maplibregl) { setTimeout(init, 100); return; }
        const map = new maplibregl.Map({
          container: container,
          style: 'https://demotiles.maplibre.org/style.json',
          center: [-99.0, 31.0],
          zoom: 5.5
        });
        map.addControl(new maplibregl.NavigationControl(), 'top-right');
        const wellsSourceId = 'wells-src';
        const wellsLayerId = 'wells-layer';
        const featuresById = new Map();
        map.on('load', () => {
          map.addSource(wellsSourceId, { type: 'geojson', data: { type:'FeatureCollection', features: [] } });
          map.addLayer({
            id: wellsLayerId,
            type: 'circle',
            source: wellsSourceId,
            paint: {
              'circle-radius': 5,
              'circle-color': '#2563eb',
              'circle-stroke-width': 1,
              'circle-stroke-color': '#ffffff'
            }
          });
        });
        function setItems(items){
          const fc = { type:'FeatureCollection', features: [] };
          featuresById.clear();
          items.forEach(it => {
            const f = { type:'Feature', geometry:{ type:'Point', coordinates:[it.lon, it.lat] }, properties:{ id: it.id, name: it.name, county: it.county } };
            fc.features.push(f);
            featuresById.set(it.id, f);
          });
          const src = map.getSource(wellsSourceId);
          if (src) src.setData(fc);
          if (fc.features.length){
            const bounds = new maplibregl.LngLatBounds();
            fc.features.forEach(f => bounds.extend(f.geometry.coordinates));
            map.fitBounds(bounds, { padding: 40, duration: 600 });
          }
        }
        function flyToItem(id){
          const f = featuresById.get(id);
          if (!f) return;
          const [lon, lat] = f.geometry.coordinates;
          map.flyTo({ center:[lon, lat], zoom: Math.max(map.getZoom(), 12), duration: 600 });
        }
        window.__tx_map = { setItems, flyToItem };
        window.dispatchEvent(new CustomEvent('tx_map_ready'));
      }
      init();
    })();
  </script>
</section>


