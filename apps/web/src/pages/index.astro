---
const PUBLIC_API_URL = import.meta.env.PUBLIC_API_URL || 'http://127.0.0.1:8000';
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>TX Well Lookup</title>
    <meta name="x-api" content={PUBLIC_API_URL} />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.5.3/dist/MarkerCluster.Default.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" defer></script>
    <script src="https://unpkg.com/leaflet.markercluster@1.5.3/dist/leaflet.markercluster.js" defer></script>
    
    <style>
      /* ALIGNMENT FIX v4 - Global rules */
      :root{--bg:#0f172a;--panel:#111827;--muted:#94a3b8;--accent:#38bdf8;--line:#1f2937;--text:#e2e8f0;--cell-pad:12px}
      [data-theme='dark']{--bg:#0f172a;--panel:#111827;--muted:#94a3b8;--accent:#38bdf8;--line:#1f2937;--text:#e2e8f0}
      [data-theme='light']{--bg:#f8fafc;--panel:#ffffff;--muted:#4b5563;--accent:#2563eb;--line:#e5e7eb;--text:#111827}
      *{box-sizing:border-box}
      /* Global rule to shift all tbody td content */
      :global(tbody td) { padding-left: calc(var(--cell-pad) + 2px) !important; }
      body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:0;background:var(--bg);color:var(--text);display:grid;grid-template-rows:auto 1fr;min-height:100vh}
      header{padding:16px 20px;border-bottom:1px solid var(--line);background:var(--panel);color:var(--text)}
      header strong{letter-spacing:0.3px}
      .app{display:grid;grid-template-columns:360px minmax(0,1fr);gap:0}
      .sidebar{border-right:1px solid var(--line);padding:18px 16px 24px;background:var(--panel);position:relative;z-index:3;isolation:isolate}
      #filters{display:flex;flex-direction:column;gap:12px;width:100%}
      .content{display:grid;grid-template-rows:minmax(360px,1fr) 240px;position:relative;z-index:1}
      .map{min-height:360px;position:relative;z-index:0}
      .results{border-top:1px solid var(--line);overflow-y:auto;overflow-x:hidden;background:var(--panel)}
      /* Account for scrollbar width to keep header/body columns aligned */
      .results{--sbw: calc( var(--_sbw, 0px) );}
      @supports selector(::-webkit-scrollbar){
        .results{ --_sbw: 0px; }
      }
      @supports not selector(::-webkit-scrollbar){
        .results{ --_sbw: 0px; }
      }
      label{display:block;font-size:12px;color:var(--muted);margin-top:10px}
      input{width:100%;padding:10px;margin-top:6px;border:1px solid var(--line);border-radius:10px;background:var(--panel);color:var(--text)}
      [data-theme='light'] input{color:#000 !important}
      input:focus, button:focus{outline:2px solid var(--accent);outline-offset:2px}
      .btns{display:flex;gap:10px}
      button{margin-top:14px;padding:10px 14px;border-radius:10px;border:1px solid var(--line);background:var(--panel);color:var(--text);cursor:pointer}
      button:hover{border-color:var(--accent);background:color-mix(in srgb, var(--panel) 90%, var(--accent))}
      #theme{margin-top:0;padding:8px 10px;border-radius:8px;line-height:1;display:inline-flex;align-items:center;gap:6px;background:var(--panel);color:var(--text);border:1px solid var(--line)}
      #exportCsv, #exportPdf{margin-top:0;padding:8px 10px;border-radius:8px;line-height:1;display:inline-flex;align-items:center;background:var(--panel);color:var(--text);border:1px solid var(--line)}
      #exportCsv:hover, #exportPdf:hover{border-color:var(--accent);background:color-mix(in srgb, var(--panel) 90%, var(--accent))}
      /* Custom select */
      .select-wrap{position:relative}
      .select-row{display:grid;grid-template-columns:1fr 1fr;gap:10px}
      .select-btn{width:100%;padding:10px 36px 10px 12px;margin-top:6px;border:1px solid var(--line);border-radius:10px;background:var(--panel);color:var(--text);display:flex;align-items:center;justify-content:space-between}
      .select-caret{display:inline-block;width:16px;height:16px;flex:0 0 16px}
      .select-list{position:absolute;left:0;top:calc(100% + 6px);width:100%;background:var(--panel);border:1px solid var(--line);border-radius:10px;padding:6px;z-index:20;box-shadow:0 10px 25px rgba(0,0,0,0.25);display:none}
      .select-wrap.open .select-list{display:block}
      .select-list li{list-style:none;padding:8px 10px;border-radius:8px;cursor:pointer}
      .select-list li:hover{background:color-mix(in srgb, var(--panel) 90%, var(--accent))}
      /* Map overlay button */
      #searchArea{position:absolute;top:10px;left:50%;transform:translateX(-50%);z-index:6;display:none}
      #searchArea.show{display:block}
      #searchArea button{padding:8px 12px;border-radius:8px;border:1px solid var(--line);background:var(--panel);color:var(--text);box-shadow:0 6px 20px rgba(0,0,0,0.25)}
      table{width:100%;border-collapse:collapse;table-layout:fixed;font-size:14px;color:var(--text)}
      thead{position:sticky;top:0;background:var(--panel);z-index:1;padding-right:var(--sbw, 0px)}
      th{padding:12px var(--cell-pad);border-bottom:1px solid var(--line);vertical-align:middle;text-align:left;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative}
      /* Header base x; body text nudged ~5px using padding so it always shows */
      thead th{padding-left:var(--cell-pad) !important}
      tbody td{padding-left:calc(var(--cell-pad) + 5px) !important}
      /* Remove any group shift that could cause horizontal scroll */
      tbody{transform:none}
      td{padding:12px var(--cell-pad);border-bottom:1px solid var(--line);vertical-align:middle;text-align:left;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative}
      /* remove legacy inner span adjustment */
      .cell{display:initial;padding-left:0}
      th.sortable{cursor:pointer}
      th.sortable::after{content:'';margin-left:4px;font-size:10px;opacity:.7}
      thead tr:hover th{background:color-mix(in srgb, var(--panel) 90%, var(--accent) 10%)}
      .sortable[data-sort="asc"]::after{content:'\25B2'}
      .sortable[data-sort="desc"]::after{content:'\25BC'}
      /* Source pill */
      .chip{display:inline-block;padding:4px 8px;border-radius:999px;font-size:12px;font-weight:600;border:1px solid var(--line)}
      .chip-sdr{background:#1d4ed8;color:#fff}
      .chip-gwdb{background:#059669;color:#fff}
      tbody tr{cursor:pointer}
      tbody tr:hover{background:color-mix(in srgb, var(--accent) 15%, var(--panel))}
      tr.row-active{background:color-mix(in srgb, var(--panel) 85%, var(--accent) 15%)}
      tr.row-active:first-child{border-left:3px solid var(--accent)}
      #status{padding:8px 12px;color:var(--muted);font-size:12px;border-bottom:1px solid var(--line);display:flex;align-items:center;gap:8px;background:var(--panel)}
      .spinner{width:14px;height:14px;border:2px solid #334155;border-top-color:var(--accent);border-radius:50%;animation:spin 0.8s linear infinite}
      @keyframes spin{to{transform:rotate(360deg)}}
      .toggle{display:flex;align-items:flex-start;gap:10px;margin-top:14px;color:var(--text);flex-wrap:wrap}
      .toggle input{flex:0 0 auto;margin-top:2px}
      .toggle span{flex:1 1 auto;color:var(--text);font-size:14px;display:block;line-height:1.4;white-space:normal;max-width:100%}
      .banner{padding:10px 12px;background:#421e1e;color:#fecaca;border-bottom:1px solid #7f1d1d;display:none}
      .banner.show{display:block}
      #mapOverlay{position:absolute;inset:0;display:none;align-items:center;justify-content:center;background:rgba(0,0,0,0.15);z-index:5}
      #mapOverlay.show{display:flex}
      @media (max-width: 900px){
        .app{grid-template-columns:1fr}
        .sidebar{border-right:0;border-bottom:1px solid var(--line)}
        .content{grid-template-rows:300px auto}
      }
      @media (min-width: 900px){
        html, body{height:100vh;overflow:hidden}
        .sidebar{overflow:auto}
        .results{overflow:auto}
      }
      /* Marker highlight */
      :global(.leaflet-marker-icon.selected){transform:scale(1.12);filter:drop-shadow(0 0 8px rgba(56,189,248,0.7));}
      [data-theme='light'] .date-cell{color:#000 !important}
      [data-theme='dark'] .date-cell{color:var(--text)}

      /* Modern well marker (DivIcon) */
      :global(.well-wrap){width:22px;height:22px;}
      :global(.well){width:22px;height:22px;border-radius:50%;display:grid;place-items:center;box-shadow:0 2px 6px rgba(0,0,0,0.25);border:1px solid rgba(255,255,255,0.25)}
      :global(.well--sdr){background:linear-gradient(135deg,#3b82f6,#1d4ed8)}
      :global(.well--gwdb){background:linear-gradient(135deg,#10b981,#059669)}
      :global(.well__dot){width:6px;height:6px;border-radius:50%;background:#fff;opacity:.95}
      :global(.leaflet-marker-icon:hover) :global(.well){transform:scale(1.06)}
      :global(.leaflet-marker-icon.selected) :global(.well){outline:2px solid rgba(56,189,248,0.9);outline-offset:2px}

      /* Modern cluster icon */
      :global(.cluster-wrap){}
      :global(.cluster){--size:44px;width:var(--size);height:var(--size);border-radius:50%;display:grid;place-items:center;
        background:radial-gradient(65% 65% at 30% 30%, rgba(255,255,255,0.55) 0%, rgba(255,255,255,0.1) 100%),
                    linear-gradient(135deg,#6366f1,#06b6d4);
        color:#fff;box-shadow:0 6px 18px rgba(0,0,0,0.35);border:1px solid rgba(255,255,255,0.25)}
      :global(.cluster.sm){--size:36px}
      :global(.cluster.md){--size:44px}
      :global(.cluster.lg){--size:52px}
      :global(.cluster.xl){--size:60px}
      :global(.cluster__count){font-weight:700;letter-spacing:.2px;text-shadow:0 1px 2px rgba(0,0,0,0.25)}
      /* Neutralize default marker-cluster bubble so custom HTML shows cleanly */
      :global(.marker-cluster){background:transparent !important;border:none !important;}
      :global(.marker-cluster) div{background:transparent !important;border:none !important;box-shadow:none !important}
      
    </style>
  </head>
  <body>
    <header>
      <div style="display:flex;align-items:center;justify-content:space-between;gap:12px">
        <strong>TX Well Lookup</strong>
        <div style="display:flex;align-items:center;gap:12px">
          <span id="asof" style="font-size:12px;color:var(--muted)"></span>
          <button id="exportCsv" type="button" aria-label="Export CSV">Export CSV</button>
          <button id="exportPdf" type="button" aria-label="Export PDF">Export PDF</button>
          <button id="theme" type="button" aria-label="Toggle theme">Toggle theme</button>
        </div>
      </div>
    </header>
    <div class="app">
      <div class="sidebar">
        <form id="filters">
          <div class="select-row">
            <div>
              <label>Data source</label>
              <div class="select-wrap" id="dsWrap">
                <button type="button" class="select-btn" id="sourceBtn" aria-haspopup="listbox" aria-expanded="false">
                  <span id="sourceLabel">SDR</span>
                  <span class="select-caret"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 20 20" fill="none"><path d="M5.25 7.5L10 12.25L14.75 7.5" stroke="#94a3b8" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/></svg></span>
                </button>
                <ul class="select-list" id="sourceList" role="listbox">
                  <li role="option" data-value="sdr">SDR</li>
                  <li role="option" data-value="gwdb">GWDB</li>
                  <li role="option" data-value="all">All</li>
                </ul>
                <input type="hidden" id="source" name="source" value="sdr" />
              </div>
            </div>
            
          </div>
          <label>County
            <input name="county" placeholder="e.g., Galveston" />
          </label>
          <label>Address or place (optional)
            <input name="addr" placeholder="e.g., 100 Congress Ave, Austin" />
          </label>
          <div class="btns">
            <button type="button" id="geocode">Find address</button>
          </div>
          <div style="display:grid;grid-template-columns:1fr 1fr;gap:8px">
            <div>
              <label>Depth min (ft)
                <input name="depth_min" type="number" />
              </label>
            </div>
            <div>
              <label>Depth max (ft)
                <input name="depth_max" type="number" />
              </label>
            </div>
          </div>
          <div style="display:grid;grid-template-columns:1fr 1fr;gap:8px">
            <div>
              <label>Date from
                <input name="date_from" type="date" />
              </label>
            </div>
            <div>
              <label>Date to
                <input name="date_to" type="date" />
              </label>
            </div>
          </div>
          <div class="btns">
            <button type="submit">Apply</button>
            <button type="button" id="reset">Reset</button>
          </div>
          <div class="toggle">
            <input id="use_radius" type="checkbox" />
            <span>Enable radius search around map center</span>
          </div>
          <label>Radius (meters)
            <input name="radius_m" type="number" value="1609" />
          </label>
          <div style="font-size:12px;color:var(--muted);margin-top:6px">Tip: click on the map to set the center when radius is enabled.</div>
        </form>
      </div>
      <div class="content">
        <div id="map" class="map">
          <div id="mapOverlay"><span class="spinner"></span></div>
          <div id="searchArea"><button type="button" id="searchAreaBtn">Search this area</button></div>
        </div>
        <div class="results">
          <div id="banner" class="banner" role="alert"></div>
          <div id="status" aria-live="polite">Ready</div>
          <table>
            <colgroup>
              <col style="width:10%"><col style="width:8%"><col style="width:34%"><col style="width:16%"><col style="width:16%"><col style="width:16%">
            </colgroup>
            <thead>
              <tr>
                <th data-key="id" class="sortable">Well ID</th>
                <th data-key="source" class="sortable">Source</th>
                <th data-key="owner" class="sortable">Owner</th>
                <th data-key="county" class="sortable">County</th>
                <th data-key="depth_ft" class="sortable">Depth (ft)</th>
                <th data-key="date_completed" class="sortable">Completed</th>
              </tr>
            </thead>
            <tbody id="rows">
            </tbody>
          </table>
          <div id="pager" style="display:flex;align-items:center;gap:10px;padding:10px;border-top:1px solid var(--line)">
            <button id="prev" type="button">Prev</button>
            <span id="pageinfo" style="font-size:12px;color:var(--muted)"></span>
            <button id="next" type="button">Next</button>
          </div>
        </div>
      </div>
    </div>
    <script type="module">
      const API = (document.querySelector('meta[name="x-api"]')?.getAttribute('content')) || 'http://127.0.0.1:8000';
      console.log('API URL:', API);
      window.addEventListener('load', () => {
        // Theme setup
        const root = document.documentElement;
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        root.setAttribute('data-theme', savedTheme || (prefersDark ? 'dark' : 'light'));
        const themeBtn = document.getElementById('theme');
        if (themeBtn) {
          themeBtn.addEventListener('click', () => {
            const cur = root.getAttribute('data-theme') || 'dark';
            const next = cur === 'dark' ? 'light' : 'dark';
            root.setAttribute('data-theme', next);
            localStorage.setItem('theme', next);
          });
        }

        // Ensure Leaflet scripts are available
        const L = window.L;
        if (!L || typeof L.map !== 'function') {
          console.error('Leaflet not loaded yet');
          return;
        }
        const map = L.map('map').setView([31.0, -99.0], 6);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '&copy; OSM' }).addTo(map);
      const clusterGroup = L.markerClusterGroup({ disableClusteringAtZoom: 13, spiderfyOnMaxZoom: true, showCoverageOnHover: false, iconCreateFunction: (cluster) => {
        const count = cluster.getChildCount();
        const sizeClass = count < 10 ? 'sm' : count < 100 ? 'md' : count < 1000 ? 'lg' : 'xl';
        const html = `<div class="cluster ${sizeClass}"><span class="cluster__count">${count}</span></div>`;
        return L.divIcon({ html, className: 'cluster-wrap', iconSize: [60,60], iconAnchor: [30,30] });
      }});
      map.addLayer(clusterGroup);
      let markers = [];
      const markersById = new Map();
      let centerMarker = null;
      let radiusCircle = null;
      let selectedCenter = null;
      let suppressFitBounds = false;
      let allRows = [];
      let pageSize = 25;
      let page = 1;
      let sortKey = 'date_completed';
      let sortDir = 'desc';
      let currentBbox = null; // {min_lat, max_lat, min_lon, max_lon}
      let areaDirty = false;
      const sourceHidden = document.getElementById('source');
      const dsWrap = document.getElementById('dsWrap');
      const sourceBtn = document.getElementById('sourceBtn');
      const sourceLabel = document.getElementById('sourceLabel');
      const sourceList = document.getElementById('sourceList');
      
      const searchAreaBtn = document.getElementById('searchAreaBtn');
      const searchAreaDiv = document.getElementById('searchArea');

      function updateSortIndicators(){
        document.querySelectorAll('th.sortable').forEach(th => {
          const key = th.getAttribute('data-key');
          if(!key) return;
          if(key === sortKey){ th.setAttribute('data-sort', sortDir); }
          else { th.removeAttribute('data-sort'); }
        });
      }
      function renderPage(){
        const start = (page - 1) * pageSize;
        const end = start + pageSize;
        const slice = allRows.slice(start, end);
        renderRows(slice);
        const pages = Math.max(1, Math.ceil(allRows.length / pageSize));
        const info = document.getElementById('pageinfo');
        if(info){ info.textContent = `Page ${page} of ${pages} (${allRows.length} total in view)`; }
        const prevBtn = document.getElementById('prev');
        const nextBtn = document.getElementById('next');
        if(prevBtn) prevBtn.disabled = page <= 1;
        if(nextBtn) nextBtn.disabled = page >= pages;
        requestAnimationFrame(() => {
          const table = document.querySelector('table');
          if(table && table.offsetWidth){ table.style.tableLayout = 'fixed'; }
        });
      }
      function setStatus(text, loading=false){
        const el = document.getElementById('status');
        el.innerHTML = '';
        if(loading){ const s = document.createElement('span'); s.className='spinner'; el.appendChild(s); }
        el.appendChild(document.createTextNode(text));
      }

      async function fetchResults(params){
        const url = new URL('/v1/search', API);
        Object.entries(params).forEach(([k,v]) => { if(v!=='' && v!=null) url.searchParams.set(k, v); });
        const res = await fetch(url, { headers: { 'Accept': 'application/json' }, mode: 'cors' });
        if(!res.ok){ const err = await res.text(); console.error('Search failed', res.status, err); throw new Error(`HTTP ${res.status}`); }
        const text = await res.text();
        try { return JSON.parse(text); } catch (e) { console.error('Invalid JSON from API', text); throw new Error('Invalid JSON'); }
      }

      function clearMarkers(){
        try{ clusterGroup.clearLayers(); }catch{}
        markers.forEach(m => { try{ /* markers are managed by clusterGroup now */ }catch{} });
        markers = []; markersById.clear();
      }
      function setBanner(text){ const b = document.getElementById('banner'); if(text){ b.textContent = text; b.classList.add('show'); } else { b.classList.remove('show'); b.textContent=''; } requestAnimationFrame(()=>map.invalidateSize()); }
      function setMapLoading(on){ const ov = document.getElementById('mapOverlay'); if(on){ ov.classList.add('show'); } else { ov.classList.remove('show'); } }
      let selectedId = null;
      function setMarkerSelected(id, on){
        const m = markersById.get(id);
        if(!m) return;
        const el = m.getElement ? m.getElement() : m._icon;
        if(el){ el.classList.toggle('selected', !!on); }
        if(on && m.bringToFront) m.bringToFront();
      }
      function selectById(id, pan=true){
        selectedId = id;
        highlightRow(id);
        setMarkerSelected(id, true);
        markersById.forEach((_m, mid) => { if(mid !== id) setMarkerSelected(mid, false); });
        const m = markersById.get(id);
        if(m){ if(pan){ map.setView(m.getLatLng(), Math.max(map.getZoom(), 12)); } m.openPopup(); }
      }
      function renderRows(items){
        const tbody = document.getElementById('rows');
        tbody.innerHTML = '';
        for(const it of items){
          const source = (it.source || 'sdr').toUpperCase();
          const chipClass = `chip chip-${(it.source || 'sdr')}`;
          const tr = document.createElement('tr');
          tr.innerHTML = `<td><span class="cell">${it.id}</span></td>`+
                          `<td><span class="${chipClass}">${source}</span></td>`+
                          `<td><span class="cell">${it.owner||''}</span></td>`+
                          `<td><span class="cell">${it.county||''}</span></td>`+
                          `<td><span class="cell">${it.depth_ft??''}</span></td>`+
                          `<td class="date-cell"><span class="cell">${it.date_completed||''}</span></td>`;
          tr.tabIndex = 0;
          tr.style.cursor = 'pointer';
          tr.addEventListener('click', () => { selectById(it.id); });
          tr.addEventListener('keydown', (e) => { if(e.key==='Enter' || e.key===' '){ e.preventDefault(); selectById(it.id); }});
          tr.addEventListener('mouseenter', () => { setMarkerSelected(it.id, true); tr.style.backgroundColor = 'color-mix(in srgb, var(--accent) 15%, var(--panel))'; });
          tr.addEventListener('mouseleave', () => { if(selectedId !== it.id) setMarkerSelected(it.id, false); if(selectedId !== it.id) tr.style.backgroundColor = ''; });
          tr.dataset.id = it.id;
          tbody.appendChild(tr);
        }
        if(items.length === 0){
          const tr = document.createElement('tr');
          tr.innerHTML = '<td colspan="6" style="color:var(--muted);padding:16px">No results. Try widening your filters or moving the map.</td>';
          tbody.appendChild(tr);
        }
      }
      function renderMarkers(items){
        clearMarkers();
        const pts = [];
        const makeWellIcon = (source) => {
          const variant = (source || 'sdr').toLowerCase() === 'gwdb' ? 'gwdb' : 'sdr';
          const html = `<div class="well-wrap"><div class="well well--${variant}"><span class="well__dot"></span></div></div>`;
          return L.divIcon({ html, className: 'well-icon', iconSize: [22,22], iconAnchor: [11,11], popupAnchor: [0,-12] });
        };
        for(const it of items){
          if(it.lat && it.lon){
            const html = `<strong>${it.id}</strong><br/>${it.owner||''}<br/>${it.county||''}<br/>Depth: ${it.depth_ft??''} ft<br/>Completed: ${it.date_completed||''}`;
            const m = L.marker([it.lat, it.lon], { icon: makeWellIcon(it.source) }).bindPopup(html);
            m.on('click', () => selectById(it.id, false));
            clusterGroup.addLayer(m);
            markers.push(m);
            markersById.set(it.id, m);
            pts.push([it.lat, it.lon]);
          }
        }
        if(pts.length && !suppressFitBounds){
          const b = L.latLngBounds(pts);
          setTimeout(() => { map.invalidateSize(); map.fitBounds(b.pad(0.2)); }, 0);
        }
        suppressFitBounds = false;
      }
      function highlightRow(id){
        const rows = document.querySelectorAll('#rows tr');
        rows.forEach(r => {
          const isActive = r.dataset.id === String(id);
          r.classList.toggle('row-active', isActive);
          if(isActive){ r.style.backgroundColor = 'color-mix(in srgb, var(--panel) 85%, var(--accent) 15%)'; } else if(selectedId !== r.dataset.id) { r.style.backgroundColor = ''; }
        });
        const target = Array.from(rows).find(r => r.dataset.id === String(id));
        if(target){ target.scrollIntoView({ block: 'nearest' }); }
        const table = document.querySelector('table');
        if(table){ table.style.tableLayout='fixed'; }
        markersById.forEach((_m, mid) => { const el = markersById.get(mid)?._icon || markersById.get(mid)?.getElement?.(); if(el){ el.classList.toggle('selected', String(mid)===String(id)); }});
      }

      async function geocodeAndCenter(q){
        if(!q) return;
        try{
          setMapLoading(true); setBanner('');
          const url = `https://nominatim.openstreetmap.org/search?format=json&limit=1&addressdetails=1&q=${encodeURIComponent(q + ', Texas')}`;
          const res = await fetch(url, { headers: { 'Accept': 'application/json' } });
          const data = await res.json();
          if(Array.isArray(data) && data.length){
            const { lat, lon } = data[0];
            selectedCenter = L.latLng(parseFloat(lat), parseFloat(lon));
            map.setView(selectedCenter, 12);
            if(centerMarker){ map.removeLayer(centerMarker); }
            centerMarker = L.marker(selectedCenter, { opacity: 0.7 }).addTo(map).bindPopup('Search center');
            suppressFitBounds = true;
            currentBbox = null; // prefer radius if user is going to use it
            await runSearch();
          } else {
            setBanner('Could not find that address. Try a more specific query.');
          }
        } catch (e){ setBanner('Geocoding failed. Please try again.'); }
        finally { setMapLoading(false); }
      }

      function gatherFilters(){
        const form = document.getElementById('filters');
        const data = Object.fromEntries(new FormData(form).entries());
        const params = {
          source: (data.source || 'sdr'),
          county: data.county || undefined,
          depth_min: data.depth_min || undefined,
          depth_max: data.depth_max || undefined,
          date_from: data.date_from || undefined,
          date_to: data.date_to || undefined,
          limit: undefined,
        };
        const useRadius = document.getElementById('use_radius').checked;
        const r = Number(data.radius_m || 0);
        if(useRadius && !Number.isNaN(r) && r > 0){
          const c = selectedCenter || map.getCenter();
          params.lat = c.lat;
          params.lon = c.lng;
          params.radius_m = r;
        } else if(currentBbox){
          params.min_lat = currentBbox.min_lat;
          params.max_lat = currentBbox.max_lat;
          params.min_lon = currentBbox.min_lon;
          params.max_lon = currentBbox.max_lon;
        }
        return params;
      }

      async function runSearch(){
        setStatus('Loading...', true);
        const params = gatherFilters();
        const useRadius = document.getElementById('use_radius').checked;
        if(useRadius && params.radius_m){
          if(radiusCircle){ map.removeLayer(radiusCircle); }
          const c = selectedCenter || map.getCenter();
          radiusCircle = L.circle([c.lat, c.lng], { radius: params.radius_m, color: '#3b82f6', weight: 1, fillOpacity: 0.05 }).addTo(map);
        } else {
          if(radiusCircle){ map.removeLayer(radiusCircle); radiusCircle = null; }
        }
        let payload = null;
        try{
          payload = await fetchResults(params); setBanner('');
        }catch(e){ console.error(e); setBanner(`Error loading results. ${e && e.message ? e.message : ''}`); payload=null; }
        const rows = Array.isArray(payload) ? payload : (payload?.items || []);
        const total = Array.isArray(payload) ? rows.length : (payload?.total ?? rows.length);
        allRows = rows.slice();
        const cmp = (a,b,key)=>{ const va=(a[key] ?? ''), vb=(b[key] ?? ''); if(key==='depth_ft'){ const na=Number(va)||0, nb=Number(vb)||0; return na-nb; } return String(va).localeCompare(String(vb)); };
        sortKey = 'date_completed'; sortDir = 'desc';
        allRows.sort((a,b)=>{ const c=cmp(a,b,sortKey); return sortDir==='asc'? c : -c; });
        page = 1; updateSortIndicators(); renderPage();
        renderMarkers(allRows);
        if(useRadius && params.radius_m){ setStatus(rows.length ? `Showing ${rows.length} of ${total} within ${params.radius_m} m` : 'No results for this radius'); }
        else if(currentBbox){ setStatus(rows.length ? `Showing ${rows.length} of ${total} in this area` : 'No results in this area'); }
        else { setStatus(rows.length ? `Showing ${rows.length} of ${total}` : 'No results'); }
        // Persist filters
        const qs = new URLSearchParams();
        Object.entries(params).forEach(([k,v]) => { if(v!=null && v!=='') qs.set(k, String(v)); });
        const url = `${location.pathname}?${qs.toString()}`;
        history.replaceState(null, '', url);
        await updateMeta();
        // hide search area button after applying
        areaDirty = false; searchAreaDiv.classList.remove('show');
      }

      function applyQueryDefaults(){
        const params = new URLSearchParams(window.location.search);
        const source = params.get('source'); if(source){ sourceHidden.value = source; sourceLabel.textContent = source.toUpperCase(); }
        
        const county = params.get('county'); if(county){ document.querySelector('input[name="county"]').value = county; }
        const df = params.get('date_from'); if(df) document.querySelector('input[name="date_from"]').value = df;
        const dt = params.get('date_to'); if(dt) document.querySelector('input[name="date_to"]').value = dt;
        const min_lat = params.get('min_lat'); const max_lat = params.get('max_lat'); const min_lon = params.get('min_lon'); const max_lon = params.get('max_lon');
        if(min_lat && max_lat && min_lon && max_lon){ currentBbox = { min_lat: parseFloat(min_lat), max_lat: parseFloat(max_lat), min_lon: parseFloat(min_lon), max_lon: parseFloat(max_lon) }; }
        const lat = params.get('lat'); const lon = params.get('lon'); const rad = params.get('radius_m');
        if(lat && lon && rad){ document.getElementById('use_radius').checked = true; document.querySelector('input[name="radius_m"]').value = rad; selectedCenter = L.latLng(parseFloat(lat), parseFloat(lon)); map.setView(selectedCenter, 12); }
      }

      document.getElementById('filters').addEventListener('submit', (e) => { e.preventDefault(); currentBbox=null; runSearch().catch(() => setStatus('Error loading')); });
      let t; const deb = (fn, ms=300) => (...a) => { clearTimeout(t); t = setTimeout(() => fn(...a), ms); };
      ;['source','county','depth_min','depth_max','date_from','date_to','radius_m'].forEach(n => { const el = document.querySelector(`[name="${n}"]`); if(el){ el.addEventListener('input', deb(() => { if(n!=='radius_m'){ /* leave bbox intact */ } runSearch().catch(() => setStatus('Error loading')); })); } });
      document.getElementById('reset').addEventListener('click', () => { (document.getElementById('filters')).reset(); sourceHidden.value='sdr'; sourceLabel.textContent='SDR'; limitHidden.value='100'; limitLabel.textContent='100'; currentBbox=null; setStatus('Ready'); renderRows([]); clearMarkers(); });

      // Pagination
      const prev = document.getElementById('prev'), next = document.getElementById('next');
      if(prev){ prev.addEventListener('click', () => { if(page>1){ page--; renderPage(); }}); }
      if(next){ next.addEventListener('click', () => { const pages = Math.max(1, Math.ceil(allRows.length/pageSize)); if(page<pages){ page++; renderPage(); }}); }

      // Geocode button and Enter key
      const addrInput = document.querySelector('input[name="addr"]');
      document.getElementById('geocode').addEventListener('click', async () => { const q = addrInput && 'value' in addrInput ? addrInput.value.trim() : ''; await geocodeAndCenter(q); });
      if(addrInput){ addrInput.addEventListener('keydown', async (e) => { if(e.key === 'Enter') { e.preventDefault(); const q = addrInput.value.trim(); await geocodeAndCenter(q); } }); }

      async function updateMeta(){
        try{ const sel = (sourceHidden && sourceHidden.value) || 'sdr'; const url = new URL('/v1/meta', API); url.searchParams.set('source', sel); const res = await fetch(url); const j = await res.json(); const asof=document.getElementById('asof'); if(asof && j && j.as_of){ asof.textContent=`As-of ${j.as_of}`; } }catch(e){ }
      }

      // Custom dropdown behavior: source
      sourceBtn.addEventListener('click', () => { const open = dsWrap.classList.toggle('open'); sourceBtn.setAttribute('aria-expanded', open ? 'true' : 'false'); });
      sourceList.addEventListener('click', (e) => { const li = e.target.closest('li'); if(!li) return; const val = li.getAttribute('data-value') || 'sdr'; sourceHidden.value = val; sourceLabel.textContent = val.toUpperCase(); dsWrap.classList.remove('open'); sourceBtn.setAttribute('aria-expanded', 'false'); sourceHidden.dispatchEvent(new Event('input', { bubbles: true })); });
      document.addEventListener('click', (e) => { if(!dsWrap.contains(e.target)){ dsWrap.classList.remove('open'); sourceBtn.setAttribute('aria-expanded', 'false'); } });

      // Search this area flow
      map.on('moveend', () => { const useRadius = document.getElementById('use_radius').checked; if(!useRadius){ areaDirty = true; searchAreaDiv.classList.add('show'); } });
      searchAreaBtn.addEventListener('click', () => { const b = map.getBounds(); currentBbox = { min_lat: b.getSouth(), max_lat: b.getNorth(), min_lon: b.getWest(), max_lon: b.getEast() }; runSearch().catch(() => setStatus('Error loading')); });

      applyQueryDefaults();
      runSearch().catch(() => setStatus('Error loading'));
      map.on('click', (e) => { selectedCenter = e.latlng; map.setView(e.latlng, Math.max(map.getZoom(), 12)); if(document.getElementById('use_radius').checked){ suppressFitBounds = true; runSearch(); } });
      document.getElementById('use_radius').addEventListener('change', () => { currentBbox = null; runSearch(); });

      const clusterToggle = document.getElementById('use_cluster'); if(clusterToggle){ clusterToggle.addEventListener('change', () => { renderMarkers(allRows); }); }

      // Export CSV/PDF buttons remain unchanged
      const exportBtn = document.getElementById('exportCsv'); if(exportBtn){ exportBtn.addEventListener('click', async () => { try{ exportBtn.disabled = true; const prev = exportBtn.textContent; exportBtn.textContent = 'Exporting…'; const body = gatherFilters(); const url = new URL('/v1/search.csv', API); const res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body), mode: 'cors' }); const blob = await res.blob(); const a = document.createElement('a'); a.href = URL.createObjectURL(blob); const ts = new Date().toISOString().replace(/[-:T]/g,'').slice(0,15); a.download = `tx_wells_${ts}.csv`; document.body.appendChild(a); a.click(); URL.revokeObjectURL(a.href); a.remove(); exportBtn.textContent = prev; exportBtn.disabled = false; }catch(e){ console.error('CSV export failed', e); setBanner('CSV export failed. Please try again.'); exportBtn.disabled = false; exportBtn.textContent = 'Export CSV'; } }); }
      const exportPdfBtn = document.getElementById('exportPdf'); if(exportPdfBtn){ exportPdfBtn.addEventListener('click', async () => { try{ exportPdfBtn.disabled = true; const prev = exportPdfBtn.textContent; exportPdfBtn.textContent = 'Exporting…'; const body = gatherFilters(); const url = new URL('/v1/reports?format=pdf', API); const res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body), mode: 'cors' }); const blob = await res.blob(); const a = document.createElement('a'); a.href = URL.createObjectURL(blob); const ts = new Date().toISOString().replace(/[-:T]/g,'').slice(0,15); a.download = `tx_wells_${ts}.pdf`; document.body.appendChild(a); a.click(); URL.revokeObjectURL(a.href); a.remove(); exportPdfBtn.textContent = prev; exportPdfBtn.disabled = false; }catch(e){ console.error('PDF export failed', e); setBanner('PDF export failed. Please try again.'); exportPdfBtn.disabled = false; exportPdfBtn.textContent = 'Export PDF'; } }); }

      });
    </script>
  </body>
  </html>


